---
description: 
globs: 
alwaysApply: false
---
# TypeScript 学習プロジェクト ルール

## プロジェクト概要
このプロジェクトは、TypeScriptの学習を目的とした問題解決型のプログラミング練習環境です。AIが作成した問題を解き、Jestを使用してテストを実行して結果を確認します。

## プロジェクト構造

### ディレクトリ構成
```
src/
├── problems/           # 問題ファイル
│   ├── a/             # A問題（AtCoder準拠：実装・入出力）
│   ├── b/             # B問題（AtCoder準拠：全探索・シミュレーション）
│   ├── c/             # C問題（AtCoder準拠：データ構造・アルゴリズム）
│   └── d/             # D問題（AtCoder準拠：高度なアルゴリズム）
├── templates/         # テンプレートファイル
├── utils/            # ユーティリティ関数
│   ├── inputs.ts     # 入力処理
│   ├── output.ts     # 出力処理
│   └── types.ts      # 型定義
└── vite-env.d.ts

tests/
├── a/                # A問題のテスト
├── b/                # B問題のテスト
├── c/                # C問題のテスト
├── d/                # D問題のテスト
├── fixtures/         # テスト用データ
└── utils/           # テスト用ユーティリティ
```

## コーディング規約

### 問題ファイル（src/problems/{category}/{problem-id}.ts）

#### 必須要素
1. **JSDocコメント**: 問題の説明、制約、入力例、期待する出力を記載
2. **solve関数**: 必ずexportし、以下のシグネチャを使用
   ```typescript
   export function solve(input: string): string
   // または
   export const solve = (input: string): string => { ... }
   ```

#### テンプレート
```typescript
/**
 * 問題: [問題のタイトル]
 * [問題の詳細説明]
 * なお入力値は必ず文字列で与えられる
 *
 * 制約
 * [制約条件を記載]
 *
 * 入力例
 * '[具体的な入力例]'
 *
 * 期待する出力
 * '[期待される出力]'
 */

export const solve = (input: string): string => {
  // 実装内容
  return result;
};
```

#### 入力処理パターン
- 基本: `const [, ...numbers] = input.trim().split(/\s+/).map(Number);`
- 複数行: `const lines = input.trim().split('\n');`
- 混合データ: 適切にパースして型変換

### テストファイル（tests/{category}/{problem-id}.test.ts）

#### 必須要素
1. **import文**: Jest関数と対象のsolve関数をimport
2. **describe**: カテゴリ-番号形式（例: "A-1"）
3. **テストケース**: 最低1つ、推奨3つ以上

#### テンプレート
```typescript
import { describe, it, expect } from '@jest/globals';
import { solve } from '../../src/problems/{category}/{problem-id}.js';

describe('{CATEGORY}-{ID}', () => {
  it('should solve the problem correctly', () => {
    const input = `[テスト入力]`;
    const expected = `[期待する出力]`;
    expect(solve(input)).toBe(expected);
  });

  it('should handle edge case', () => {
    // エッジケースのテスト
  });

  it('should handle another case', () => {
    // 追加のテストケース
  });
});
```

## 開発ワークフロー

### 新しい問題を追加する場合
1. **問題ファイル作成**: `src/problems/{category}/{problem-id}.ts`
2. **JSDocで問題説明を記載**
3. **solve関数を実装**
4. **テストファイル作成**: `tests/{category}/{problem-id}.test.ts`
5. **複数のテストケースを追加**
6. **テスト実行**: `npm test`

### テスト実行コマンド
- 全テスト実行: `npm test`
- 監視モード: `npm run test:watch`
- 特定のテスト: `npm test -- --testNamePattern="A-1"`

## 品質基準

### コード品質
- **型安全性**: TypeScriptの型システムを最大限活用
- **可読性**: 明確な変数名と適切なコメント
- **効率性**: 時間計算量とメモリ使用量を考慮
- **一貫性**: プロジェクト全体で統一されたコーディングスタイル

### テスト品質
- **網羅性**: 正常ケース、エッジケース、異常ケースをカバー
- **明確性**: テストの意図が明確に分かる命名とコメント
- **独立性**: 各テストが独立して実行可能

## AtCoder準拠の問題分類

### A問題（実装・入出力）
- **特徴**: 基本的な実装力と入出力処理
- **典型例**: 四則演算、条件分岐、文字列操作、基本的な配列処理
- **時間制約**: 通常2秒
- **制約**: N ≤ 100程度の小さなデータ

### B問題（全探索・シミュレーション）
- **特徴**: 全探索、場合分け、シミュレーション
- **典型例**: 二重ループ、条件に応じた処理、パターン列挙
- **時間制約**: 通常2秒
- **制約**: N ≤ 1000程度

### C問題（データ構造・アルゴリズム）
- **特徴**: 基本的なデータ構造とアルゴリズム
- **典型例**: ソート、二分探索、グリーディ、動的計画法の基礎
- **時間制約**: 通常2秒
- **制約**: N ≤ 10^5程度

### D問題（高度なアルゴリズム）
- **特徴**: より高度なアルゴリズムと数学的考察
- **典型例**: グラフアルゴリズム、高度なDP、数論、幾何
- **時間制約**: 通常2秒
- **制約**: N ≤ 10^6程度

## AI支援時の指示

### ⚠️ 重要な制約
**解説・解答の提供について**:
- AIは問題文とテストケースのみを提供する
- **解説や解答は、ユーザーが明示的に求めるまで絶対に提供しない**
- ヒントを求められた場合も、直接的な解法は避け、考え方の方向性のみ示す
- デバッグ時も、エラーの原因を指摘するに留め、修正コードは提供しない

### 新しい問題作成を依頼する場合
```
{A/B/C/D}問題の{番号}を作成してください。
- AtCoderの{A/B/C/D}問題レベルに準拠
- テーマ: [具体的なアルゴリズム・データ構造名]
- 制約: AtCoder準拠の適切な制約
- 解説・解答は不要（問題文とテストケースのみ）
```

### 既存問題の改善を依頼する場合
```
{category}-{id}の問題について以下を改善してください：
- [具体的な改善要求]
- テストケースの追加
- 問題文の明確化
※解説・解答の追加は不要
```

### ヒントを求める場合
```
{category}-{id}の問題について、アプローチの方向性のみ教えてください。
- 具体的な実装方法は不要
- 使用すべきアルゴリズム・データ構造の種類のみ
```

### デバッグ支援を依頼する場合
```
{category}-{id}の問題でテストが失敗します。
期待値: [expected]
実際の値: [actual]
エラーの原因の特定のみお願いします（修正コードは不要）。
```

## 技術仕様

### 環境
- **Node.js**: ES Modules対応版
- **TypeScript**: 5.8.3
- **Jest**: 30.0.0（ES Modules設定）
- **Vite**: 6.3.5

### 設定ファイル
- `jest.config.js`: ES Modules + TypeScript設定
- `tsconfig.json`: TypeScript設定
- `package.json`: スクリプトと依存関係

## 拡張性

### 新しいカテゴリ追加
1. `src/problems/`に新しいディレクトリ作成
2. `tests/`に対応するディレクトリ作成
3. このルールファイルのディレクトリ構成を更新
4. AtCoderの出題傾向に合わせた難易度設定

### ユーティリティ関数追加
- `src/utils/`に新しい関数を追加
- 対応するテストを`tests/utils/`に作成
- 型定義が必要な場合は`src/utils/types.ts`に追加

## 学習方針

### 自力解決の重視
- 問題は自分で考えて解く
- AIからの解説・解答は求めるまで受け取らない
- 行き詰まった場合は、まず自分で調べる・考える時間を確保
- どうしても必要な場合のみ、ヒント（方向性）を求める

### AtCoderスタイルの習得
- 実際のAtCoderの問題形式に慣れる
- 時間制約を意識した実装
- 効率的なアルゴリズムの選択
- エッジケースを考慮したテストケース作成

このルールに従って開発を進めることで、AtCoderに準拠した一貫性のある高品質なTypeScript学習環境を維持し、自力での問題解決能力を向上させることができます。








